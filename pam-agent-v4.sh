#!/bin/bash

# PAM Automation Agent V4 - JSON-based Smart IP Detection - Phase 3
# р╕Ьр╕╣р╣Йр╕Юр╕▒р╕Тр╕Щр╕▓: р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Ир╕▓р╕Б pam-agent-v3.sh р╣Ар╕Ыр╣Зр╕Щр╕гр╕░р╕Ър╕Ъ JSON-based workflow
# р╕зр╕▒р╕Хр╕Цр╕╕р╕Ыр╕гр╕░р╕кр╕Зр╕Др╣М: р╕Ир╕▒р╕Фр╕Бр╕▓р╕г PAM р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╣Бр╕Ър╕Ър╣Гр╕лр╕бр╣Ир╣Гр╕Кр╣Йр╣Др╕Яр╕ер╣М user_credentials_clean.json
#
# р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤р╣Гр╕лр╕бр╣Ир╣Гр╕Щ V4:
# - р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Ир╕▓р╕Б CSV р╣Ар╕Ыр╣Зр╕Щ JSON data source (user_credentials_clean.json)
# - Smart IP Detection р╕Чр╕╡р╣Ир╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Бр╕ер╣Йр╕з:
#   1. Auto-select р╣Ар╕бр╕╖р╣Ир╕н current VM IP р╕Хр╕гр╕Зр╕Бр╕▒р╕Ъ JSON data р╣Ар╕Юр╕╡р╕вр╕З 1 р╕гр╕▓р╕вр╕Бр╕▓р╕г
#   2. Alert р╣Ар╕бр╕╖р╣Ир╕нр╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ъ current VM IP
#   3. Prompt р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡ multiple IP matches р╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ
# - р╣Гр╕Кр╣Й jq р╕кр╕│р╕лр╕гр╕▒р╕Ъ JSON parsing
# - р╕гр╕▒р╕Бр╕йр╕▓р╣Ар╕бр╕Щр╕╣ 8 р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б: PAM Creation, SSH Security Hardening, Show PAM Status,
#   Clean-up, CSV Generation, PAM Advanced Options (P'Aomsin Script), Advanced Cleanup, Exit
# - р╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╕Бр╕▒р╕Щр╣Др╕Фр╣Йр╕Бр╕▒р╕Ър╕Хр╕гр╕гр╕Бр╕░ pam.example.sh
# - Enhanced error handling р╣Бр╕ер╕░ user experience
#
# Phase 3 Improvements:
# - р╕ер╕Ъ set -eo pipefail р╣Бр╕ер╕░р╣Гр╕Кр╣Й || true pattern error handling
# - р╣Бр╕Бр╣Йр╣Др╕В SSH configuration issue (PermitRootLogin)
# - р╣Ар╕Юр╕┤р╣Ир╕б PAM Advanced Options (P'Aomsin Script) integration р╕Ир╕▓р╕Б GitLab
# - р╣Ар╕Юр╕┤р╣Ир╕б Advanced Cleanup functionality
# - р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З password expiry bug fix
#
# р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Др╕Яр╕ер╣М: user_credentials_clean.json (JSON structure р╕Юр╕гр╣Йр╕нр╕б users р╣Бр╕ер╕░ ip_mappings)

# Enhanced error handling - removed pipefail for production stability
# Using individual error checks with || true pattern

# р╕Хр╕▒р╕зр╣Бр╕Ыр╕гр╕кр╣Ир╕зр╕Щр╕Бр╕ер╕▓р╕З
USER_CREDS_JSON="./user_credentials_clean.json"
USER_LIST_FILE="user_list.csv"
SSH_KEY_LIST_FILE="ssh_key_list.csv"
BACKUP_DIR=""
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
CURRENT_IP=""
PASSWORD_EXPIRY_DAYS=""

# р╕нр╕▓р╕гр╣Мр╣Ар╕гр╕вр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Хр╕┤р╕Фр╕Хр╕▓р╕б rollback
declare -a CREATED_USERS=()
declare -a MODIFIED_FILES=()
declare -a CREATED_SSH_DIRS=()
declare -a PROCESSED_USERS=()

# р╕кр╕╡р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Ьр╕е
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ logging р╕Юр╕гр╣Йр╕нр╕бр╣Ар╕Вр╕╡р╕вр╕Щр╣Др╕Яр╕ер╣М
log() {
    local message="$1"
    local color="${2:-$NC}"
    echo -e "${color}${message}${NC}"
}

# Warning handler - continue processing with graceful error handling
warning_log() {
    log "тЪая╕П  WARNING: $1" "$YELLOW"
}

# р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕Юр╕гр╣Йр╕нр╕б rollback
error_exit() {
    log "тЭМ р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: $1" "$RED"
    log "ЁЯФД р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ rollback р╕нр╕вр╣Ир╕▓р╕Зр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в..." "$YELLOW"
    safe_rollback
    exit 1
}

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ rollback р╕нр╕вр╣Ир╕▓р╕Зр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
safe_rollback() {
    log "ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г rollback..." "$YELLOW"

    # р╕Др╕╖р╕Щр╕Др╣Ир╕▓р╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Др╕В
    for file in "${MODIFIED_FILES[@]}"; do
        if [[ -f "${file}.backup_${TIMESTAMP}" ]]; then
            sudo cp "${file}.backup_${TIMESTAMP}" "$file"
            log "тЬЕ р╕Др╕╖р╕Щр╕Др╣Ир╕▓р╣Др╕Яр╕ер╣М: $file" "$GREEN"
        fi
    done

    # р╕ер╕Ъ user р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
    for user in "${CREATED_USERS[@]}"; do
        if id "$user" &>/dev/null; then
            sudo userdel -r "$user" 2>/dev/null || true
            log "тЬЕ р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: $user" "$GREEN"
        fi
    done

    # р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М .ssh р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
    for ssh_dir in "${CREATED_SSH_DIRS[@]}"; do
        if [[ -d "$ssh_dir" ]]; then
            sudo rm -rf "$ssh_dir"
            log "тЬЕ р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М: $ssh_dir" "$GREEN"
        fi
    done

    log "ЁЯФД Rollback р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ" "$YELLOW"
}

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕бр╕╡р╕нр╕вр╕╣р╣Ир╕Вр╕нр╕Зр╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
check_required_files() {
    if [[ ! -f "$USER_CREDS_JSON" ]]; then
        error_exit "р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М $USER_CREDS_JSON р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ jq р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╕вр╕▒р╕З
    if ! command -v jq &>/dev/null; then
        log "ЁЯУж р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq..." "$CYAN"
        sudo apt-get update -qq && sudo apt-get install -y jq || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Фр╣Йр╕зр╕вр╕Хр╕Щр╣Ар╕нр╕З"
            error_exit "jq р╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М"
        }
        log "тЬЕ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з" "$GREEN"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Др╕Яр╕ер╣М JSON
    if ! jq empty "$USER_CREDS_JSON" 2>/dev/null; then
        error_exit "р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Др╕Яр╕ер╣М $USER_CREDS_JSON р╣Др╕бр╣Ир╣Гр╕Кр╣И JSON р╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З JSON р╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
    if ! jq -e '.users and .ip_mappings' "$USER_CREDS_JSON" >/dev/null 2>&1; then
        error_exit "р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М $USER_CREDS_JSON р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З (р╕Хр╣Йр╕нр╕Зр╕бр╕╡ users р╣Бр╕ер╕░ ip_mappings)"
    fi
}

# р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕г IP р╕Чр╕╡р╣Ир╕бр╕╡р╣Гр╕Щр╣Др╕Яр╕ер╣М JSON
get_available_ips() {
    if [[ ! -f "$USER_CREDS_JSON" ]]; then
        return 1
    fi

    # р╕Фр╕╢р╕З IP р╕Ир╕▓р╕Б ip_mappings
    jq -r '.ip_mappings | keys[]' "$USER_CREDS_JSON" 2>/dev/null | sort -V
}

# р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ private IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ (macOS compatible)
detect_current_ip() {
    # р╕лр╕▓ private IP р╕Вр╕нр╕Зр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
    local detected_ip=""

    # р╕ер╕нр╕Зр╕лр╕▓ IP р╕Ир╕▓р╕Б interface р╕лр╕ер╕▒р╕Б
    detected_ip=$(ip route get 1.1.1.1 2>/dev/null | grep -o 'src [0-9.]*' | cut -d' ' -f2 || echo "")

    if [[ -z "$detected_ip" ]]; then
        # р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕н р╕ер╕нр╕Зр╣Гр╕Кр╣Й hostname -I
        detected_ip=$(hostname -I 2>/dev/null | awk '{print $1}' || echo "")
    fi

    if [[ -z "$detected_ip" ]]; then
        # р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Ар╕Ир╕н р╕ер╕нр╕Зр╕Ир╕▓р╕Б ifconfig (macOS compatible)
        detected_ip=$(ifconfig 2>/dev/null | grep -E 'inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | grep -v '127.0.0.1' | head -1 | awk '{print $2}' || echo "")
    fi

    if [[ -z "$detected_ip" ]]; then
        # р╕кр╕│р╕лр╕гр╕▒р╕Ъ macOS р╕ер╕нр╕Зр╣Гр╕Кр╣Й route get
        detected_ip=$(route get default 2>/dev/null | grep interface | awk '{print $2}' | xargs ifconfig 2>/dev/null | grep -E 'inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | grep -v '127.0.0.1' | head -1 | awk '{print $2}' || echo "")
    fi

    echo "$detected_ip"
}

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ IP р╕бр╕╡р╣Гр╕Щр╣Др╕Яр╕ер╣М JSON р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
check_ip_in_file() {
    local ip="$1"
    if [[ -z "$ip" ]]; then
        return 1
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Гр╕Щ JSON р╣Вр╕Фр╕вр╣Гр╕Кр╣Й jq
    jq -e --arg ip "$ip" '.ip_mappings | has($ip)' "$USER_CREDS_JSON" >/dev/null 2>&1
}

# р╕гр╕▒р╕Ър╕Др╣Ир╕▓р╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
get_password_expiry_days() {
    echo
    log "ЁЯФР р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ" "$BLUE"
    log "ЁЯУЭ р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕р╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Ир╕░р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕" "$CYAN"
    log "   - р╣Гр╕кр╣Ир╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г (р╣Ар╕Кр╣Ир╕Щ 90, 180, 365)" "$CYAN"
    log "   - р╣Гр╕кр╣И 0, р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Хр╕┤р╕Фр╕ер╕Ъ р╕лр╕гр╕╖р╕нр╕Бр╕Ф Enter р╣Ар╕Юр╕╖р╣Ир╕нр╕Хр╕▒р╣Йр╕Зр╣Ар╕Ыр╣Зр╕Щр╣Др╕бр╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ (9999 р╕зр╕▒р╕Щ)" "$CYAN"
    echo

    while true; do
        read -p "ЁЯОп р╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ (р╕Бр╕Ф Enter = р╣Др╕бр╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕): " input_days

        # р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Гр╕кр╣Ир╕Др╣Ир╕▓р╕лр╕гр╕╖р╕нр╣Ар╕Ыр╣Зр╕Щр╕Др╣Ир╕▓р╕зр╣Ир╕▓р╕З р╣Гр╕лр╣Йр╣Гр╕Кр╣Й 9999
        if [[ -z "$input_days" ]]; then
            PASSWORD_EXPIRY_DAYS=9999
            log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Ар╕Ыр╣Зр╕Щр╣Др╕бр╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ (9999 р╕зр╕▒р╕Щ)" "$GREEN"
            break
        fi

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕В
        if [[ "$input_days" =~ ^-?[0-9]+$ ]]; then
            # р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щ 0 р╕лр╕гр╕╖р╕нр╕Хр╕┤р╕Фр╕ер╕Ъ р╣Гр╕лр╣Йр╣Гр╕Кр╣Й 9999
            if [[ "$input_days" -le 0 ]]; then
                PASSWORD_EXPIRY_DAYS=9999
                log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Ар╕Ыр╣Зр╕Щр╣Др╕бр╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ (9999 р╕зр╕▒р╕Щ)" "$GREEN"
                break
            else
                PASSWORD_EXPIRY_DAYS="$input_days"
                log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щ $PASSWORD_EXPIRY_DAYS р╕зр╕▒р╕Щ" "$GREEN"
                break
            fi
        else
            warning_log "р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╕Хр╕▒р╕зр╣Ар╕ер╕Вр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ"
        fi
    done
}

# р╣Ар╕ер╕╖р╕нр╕Б IP р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ (Enhanced V4 Smart Detection)
select_ip() {
    log "ЁЯФН р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕лр╕▓ private IP..." "$CYAN"

    local available_ips
    available_ips=($(get_available_ips))

    if [[ ${#available_ips[@]} -eq 0 ]]; then
        error_exit "р╣Др╕бр╣Ир╕Юр╕Ъ IP р╣Гр╕Фр╣Ж р╣Гр╕Щр╣Др╕Яр╕ер╣М $USER_CREDS_JSON"
    fi

    # р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
    local detected_ip
    detected_ip=$(detect_current_ip)

    log "ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕г IP р╕Чр╕╡р╣Ир╕бр╕╡р╣Гр╕Щр╕гр╕░р╕Ър╕Ъ:" "$BLUE"
    for i in "${!available_ips[@]}"; do
        local ip="${available_ips[$i]}"
        local user_count
        user_count=$(jq -r --arg ip "$ip" '.ip_mappings[$ip] | length' "$USER_CREDS_JSON" 2>/dev/null || echo "0")

        if [[ "$ip" == "$detected_ip" ]]; then
            log "  $((i + 1))) $ip (р╕Хр╕гр╕зр╕Ир╕Юр╕Ър╣Ар╕Ыр╣Зр╕Щ IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ, $user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й) тнР" "$GREEN"
        else
            log "  $((i + 1))) $ip ($user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й)" "$YELLOW"
        fi
    done

    # V4 Smart IP Detection Logic

    # р╕Цр╣Йр╕▓р╕бр╕╡ IP р╣Ар╕Фр╕╡р╕вр╕зр╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
    if [[ ${#available_ips[@]} -eq 1 ]]; then
        CURRENT_IP="${available_ips[0]}"
        local user_count
        user_count=$(jq -r --arg ip "$CURRENT_IP" '.ip_mappings[$ip] | length' "$USER_CREDS_JSON" 2>/dev/null || echo "0")
        log "тЬЕ р╣Гр╕Кр╣Й IP р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤: $CURRENT_IP ($user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й)" "$GREEN"
        return 0
    fi

    # р╕Цр╣Йр╕▓р╕Хр╕гр╕зр╕Ир╕Юр╕Ъ IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╣Гр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Гр╕лр╣Йр╣Ар╕кр╕Щр╕нр╣Гр╕Кр╣Йр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
    if [[ -n "$detected_ip" ]] && check_ip_in_file "$detected_ip"; then
        local user_count
        user_count=$(jq -r --arg ip "$detected_ip" '.ip_mappings[$ip] | length' "$USER_CREDS_JSON" 2>/dev/null || echo "0")
        echo
        read -p "ЁЯдФ р╕Юр╕Ъ IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ ($detected_ip, $user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й) р╣Гр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕г р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/n): " use_detected
        if [[ "$use_detected" =~ ^[Yy] ]]; then
            CURRENT_IP="$detected_ip"
            log "тЬЕ р╣Гр╕Кр╣Й IP р╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕Юр╕Ъ: $CURRENT_IP ($user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й)" "$GREEN"
            return 0
        fi
    elif [[ -n "$detected_ip" ]]; then
        log "тЪая╕П IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ ($detected_ip) р╣Др╕бр╣Ир╕бр╕╡р╣Гр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е JSON" "$YELLOW"
    fi

    # р╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡ multiple IPs р╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Юр╕Ъ current IP
    echo
    while true; do
        read -p "ЁЯОп р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕лр╕бр╕▓р╕вр╣Ар╕ер╕В IP (1-${#available_ips[@]}) р╕лр╕гр╕╖р╕нр╕Юр╕┤р╕бр╕Юр╣М IP р╣Вр╕Фр╕вр╕Хр╕гр╕З: " choice

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕В
        if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le ${#available_ips[@]} ]]; then
            CURRENT_IP="${available_ips[$((choice - 1))]}"
            local user_count
            user_count=$(jq -r --arg ip "$CURRENT_IP" '.ip_mappings[$ip] | length' "$USER_CREDS_JSON" 2>/dev/null || echo "0")
            log "тЬЕ р╣Ар╕ер╕╖р╕нр╕Б IP: $CURRENT_IP ($user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й)" "$GREEN"
            break
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щ IP address
        elif [[ "$choice" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            if check_ip_in_file "$choice"; then
                CURRENT_IP="$choice"
                local user_count
                user_count=$(jq -r --arg ip "$CURRENT_IP" '.ip_mappings[$ip] | length' "$USER_CREDS_JSON" 2>/dev/null || echo "0")
                log "тЬЕ р╣Гр╕Кр╣Й IP р╕Чр╕╡р╣Ир╕гр╕░р╕Ър╕╕: $CURRENT_IP ($user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й)" "$GREEN"
                break
            else
                log "тЭМ р╣Др╕бр╣Ир╕Юр╕Ъ IP $choice р╣Гр╕Щр╣Др╕Яр╕ер╣М JSON" "$RED"
            fi
        else
            log "тЭМ р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕лр╕гр╕╖р╕н IP address" "$RED"
        fi
    done
}

# р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М user_list.csv р╣Бр╕ер╕░ ssh_key_list.csv р╕Ир╕▓р╕Б IP р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б (JSON-based)
generate_csv_files() {
    if [[ -z "$CURRENT_IP" ]]; then
        error_exit "р╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕╖р╕нр╕Б IP"
    fi

    log "ЁЯУЭ р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М CSV р╕Ир╕▓р╕Б IP: $CURRENT_IP..." "$CYAN"

    local user_count=0

    # р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ъ IP р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕Ир╕▓р╕Б JSON (array structure)
    local usernames
    usernames=($(jq -r --arg ip "$CURRENT_IP" '.ip_mappings[$ip][]?' "$USER_CREDS_JSON" 2>/dev/null))

    if [[ ${#usernames[@]} -eq 0 ]]; then
        error_exit "р╣Др╕бр╣Ир╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ъ IP: $CURRENT_IP"
    fi

    # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М CSV р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    for username in "${usernames[@]}"; do
        # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Ир╕▓р╕Б JSON (array structure)
        local password
        local ssh_key

        password=$(jq -r --arg user "$username" '.users[] | select(.username == $user) | .password // empty' "$USER_CREDS_JSON" 2>/dev/null)
        ssh_key=$(jq -r --arg user "$username" '.users[] | select(.username == $user) | .ssh_public_key // empty' "$USER_CREDS_JSON" 2>/dev/null)

        if [[ -n "$password" ]]; then
            # р╣Ар╕Юр╕┤р╣Ир╕бр╣Гр╕Щ user_list.csv
            echo "$username","$password" >>"$USER_LIST_FILE"

            # р╣Ар╕Юр╕┤р╣Ир╕бр╣Гр╕Щ ssh_key_list.csv
            echo "$username","$ssh_key" >>"$SSH_KEY_LIST_FILE"

            ((user_count++))
        else
            log "тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: $username" "$YELLOW"
        fi
    done

    if [[ $user_count -eq 0 ]]; then
        error_exit "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ъ IP: $CURRENT_IP"
    fi

    log "тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ:" "$GREEN"
    log "   - $USER_LIST_FILE ($user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й)" "$GREEN"
    log "   - $SSH_KEY_LIST_FILE ($user_count SSH keys)" "$GREEN"
}

# р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup
create_backup_dir() {
    BACKUP_DIR="backup_${TIMESTAMP}"
    mkdir -p "$BACKUP_DIR"
    log "ЁЯУБ р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup: $BACKUP_DIR" "$BLUE"
}

# р╕кр╕│р╕гр╕нр╕Зр╣Др╕Яр╕ер╣М
backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        sudo cp "$file" "${file}.backup_${TIMESTAMP}"
        MODIFIED_FILES+=("$file")
        log "ЁЯТ╛ р╕кр╕│р╕гр╕нр╕Зр╣Др╕Яр╕ер╣М: $file" "$BLUE"
    fi
}

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З group wheel
setup_wheel_group() {
    log "ЁЯФз р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ group 'wheel'..." "$CYAN"

    if ! getent group wheel >/dev/null 2>&1; then
        sudo groupadd wheel
        log "тЬЕ р╣Ар╕Юр╕┤р╣Ир╕б group 'wheel' р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в" "$GREEN"
    else
        log "тД╣я╕П group 'wheel' р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з" "$YELLOW"
    fi

    if sudo grep -q "^%wheel\s\+ALL=(ALL)\s\+ALL" /etc/sudoers; then
        log "тД╣я╕П р╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo р╕кр╕│р╕лр╕гр╕▒р╕Ъ group 'wheel' р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з" "$YELLOW"
    else
        backup_file "/etc/sudoers"
        echo "%wheel  ALL=(ALL)  ALL" | sudo tee -a /etc/sudoers >/dev/null
        log "тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo р╕кр╕│р╕лр╕гр╕▒р╕Ъ group 'wheel' р╣Бр╕ер╣Йр╕з" "$GREEN"
    fi

    log "тД╣я╕П р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щ group 'wheel' р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ:" "$BLUE"
    sudo getent group wheel || log "р╣Др╕бр╣Ир╕бр╕╡р╕кр╕бр╕▓р╕Кр╕┤р╕Б" "$YELLOW"
}

# р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpwquality р╣Бр╕ер╕░р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ password policy (optional)
setup_password_policy() {
    echo
    read -p "ЁЯФТ р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpwquality р╣Бр╕ер╕░р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/n): " install_pwquality

    if [[ "$install_pwquality" =~ ^[Yy] ]]; then
        log "ЁЯУж р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpam-pwquality..." "$CYAN"
        if sudo apt-get update -qq 2>/dev/null && sudo apt-get install -y libpam-pwquality 2>/dev/null; then
            log "тЬЕ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpam-pwquality р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з" "$GREEN"
        else
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpam-pwquality р╣Др╕Фр╣Й р╕Вр╣Йр╕▓р╕бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ password policy"
            return
        fi

        log "ЁЯФТ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕Щ /etc/security/pwquality.conf..." "$CYAN"
        backup_file "/etc/security/pwquality.conf"

        sudo sed -i.bak -e 's/^# *minlen = .*/minlen = 14/' \
            -e 's/^# *dcredit = .*/dcredit = -1/' \
            -e 's/^# *ucredit = .*/ucredit = -1/' \
            -e 's/^# *lcredit = .*/lcredit = -1/' \
            -e 's/^# *ocredit = .*/ocredit = -1/' \
            -e 's/^# *enforcing = .*/enforcing = 1/' /etc/security/pwquality.conf

        log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з" "$GREEN"
        log "ЁЯУЛ р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З:" "$BLUE"
        sudo grep -E '^(minlen|dcredit|ucredit|lcredit|ocredit|enforcing) ' /etc/security/pwquality.conf
    else
        log "тПня╕П р╕Вр╣Йр╕▓р╕бр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpwquality р╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ password policy" "$YELLOW"
    fi
}

# р╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕ер╕░р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Вр╣Йр╕▓ group wheel
create_users() {
    if [[ ! -f "$USER_LIST_FILE" ]]; then
        error_exit "р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М $USER_LIST_FILE"
    fi

    log "ЁЯСе р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й..." "$CYAN"

    local created_count=0
    local skipped_count=0

    # р╕нр╣Ир╕▓р╕Щр╣Др╕Яр╕ер╣М user_list.csv (р╕Вр╣Йр╕▓р╕б header)
    while IFS=',' read -r username password || [[ -n "$username" ]]; do
        # р╕Вр╣Йр╕▓р╕б header
        if [[ "$username" == "username" ]]; then
            continue
        fi

        # р╕ер╕Ъ quotes
        username=$(echo "$username" | tr -d '"')
        password=$(echo "$password" | tr -d '"')

        if [[ -z "$username" ]]; then
            continue
        fi

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
        if id "$username" &>/dev/null; then
            log "тЪая╕П р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й $username р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з - р╕Вр╣Йр╕▓р╕б" "$YELLOW"
            ((skipped_count++))
            continue
        fi

        # р╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
        sudo useradd -m -G wheel "$username" || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й $username р╣Др╕Фр╣Й"
            continue
        }

        # р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
        echo "$username:$password" | sudo chpasswd || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ъ $username р╣Др╕Фр╣Й"
            # р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╣Др╕бр╣Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
            sudo userdel -r "$username" 2>/dev/null || true
            continue
        }

        CREATED_USERS+=("$username")
        PROCESSED_USERS+=("$username")

        log "тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: $username" "$GREEN"
        ((created_count++))

    done <"$USER_LIST_FILE"

    log "ЁЯУК р╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: $created_count р╣Гр╕лр╕бр╣И, $skipped_count р╕Вр╣Йр╕▓р╕б" "$BLUE"
}

# р╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Бр╕│р╕лр╕Щр╕Ф
set_password_expiry() {
    if [[ -z "$PASSWORD_EXPIRY_DAYS" ]]; then
        error_exit "р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Бр╕│р╕лр╕Щр╕Фр╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ"
    fi

    log "тП▒я╕П р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ $PASSWORD_EXPIRY_DAYS р╕зр╕▒р╕Щ..." "$CYAN"
    log "ЁЯФН Debug: PASSWORD_EXPIRY_DAYS = $PASSWORD_EXPIRY_DAYS" "$BLUE"

    local set_count=0

    for username in "${PROCESSED_USERS[@]}"; do
        log "ЁЯФН Debug: р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й $username р╕Фр╣Йр╕зр╕вр╕Др╣Ир╕▓ $PASSWORD_EXPIRY_DAYS р╕зр╕▒р╕Щ" "$BLUE"

        sudo chage -M "$PASSWORD_EXPIRY_DAYS" "$username" || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ъ: $username"
            continue
        }

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╕Хр╕▒р╣Йр╕Зр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
        local actual_days
        actual_days=$(sudo chage -l "$username" | grep "Maximum number of days" | awk -F: '{print $2}' | tr -d ' ')

        if [[ "$PASSWORD_EXPIRY_DAYS" -eq 9999 ]]; then
            log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕бр╣Ир╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕: $username (р╕Др╣Ир╕▓р╕Ир╕гр╕┤р╕З: $actual_days р╕зр╕▒р╕Щ)" "$GREEN"
        else
            log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ $PASSWORD_EXPIRY_DAYS р╕зр╕▒р╕Щ: $username (р╕Др╣Ир╕▓р╕Ир╕гр╕┤р╕З: $actual_days р╕зр╕▒р╕Щ)" "$GREEN"
        fi

        ((set_count++))
    done

    log "ЁЯУК р╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: $set_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й" "$BLUE"
}

# р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М .ssh р╣Бр╕ер╕░р╣Ар╕Юр╕┤р╣Ир╕б public key
setup_ssh_keys() {
    if [[ ! -f "$SSH_KEY_LIST_FILE" ]]; then
        error_exit "р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М $SSH_KEY_LIST_FILE"
    fi

    log "ЁЯФР р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH keys..." "$CYAN"

    local setup_count=0

    # р╕нр╣Ир╕▓р╕Щр╣Др╕Яр╕ер╣М ssh_key_list.csv (р╕Вр╣Йр╕▓р╕б header)
    while IFS=',' read -r username ssh_key || [[ -n "$username" ]]; do
        # р╕Вр╣Йр╕▓р╕б header
        if [[ "$username" == "username" ]]; then
            continue
        fi

        # р╕ер╕Ъ quotes р╕Ир╕▓р╕Б username
        username=$(echo "$username" | tr -d '"')

        if [[ -z "$username" ]] || [[ -z "$ssh_key" ]]; then
            continue
        fi

        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕бр╕╡р╕нр╕вр╕╣р╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И
        if ! id "$username" &>/dev/null; then
            log "тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й $username - р╕Вр╣Йр╕▓р╕б SSH key setup" "$YELLOW"
            continue
        fi

        local home_dir
        home_dir=$(eval echo "~$username")
        local ssh_dir="$home_dir/.ssh"
        local authorized_keys="$ssh_dir/authorized_keys"

        # р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М .ssh
        if [[ ! -d "$ssh_dir" ]]; then
            sudo mkdir -p "$ssh_dir" || {
                warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М .ssh р╕кр╕│р╕лр╕гр╕▒р╕Ъ $username р╣Др╕Фр╣Й"
                continue
            }
            CREATED_SSH_DIRS+=("$ssh_dir")
        fi

        # р╣Ар╕Вр╕╡р╕вр╕Щ SSH key (overwrite р╣Бр╕Чр╕Щ append)
        echo "$ssh_key" | sudo tee "$authorized_keys" >/dev/null 2>&1 || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╕╡р╕вр╕Щ SSH key р╕кр╕│р╕лр╕гр╕▒р╕Ъ $username р╣Др╕Фр╣Й"
            continue
        }

        # р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕кр╕┤р╕Чр╕Шр╕┤р╣М
        sudo chown -R "$username:$username" "$ssh_dir" || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╣Др╕Яр╕ер╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ъ $username р╣Др╕Фр╣Й"
        }

        sudo chmod 700 "$ssh_dir" && sudo chmod 600 "$authorized_keys" || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Др╕Яр╕ер╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ъ $username р╣Др╕Фр╣Й"
        }

        log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH key: $username" "$GREEN"
        ((setup_count++))

    done <"$SSH_KEY_LIST_FILE"

    log "ЁЯУК р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH keys р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: $setup_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й" "$BLUE"
}

# SSH Security Hardening - р╕Хр╕▓р╕бр╣Бр╕Ър╕Ъ pam.example.sh choice 16 р╕Юр╕гр╣Йр╕нр╕бр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б
ssh_security_hardening() {
    log "ЁЯФТ р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ SSH Security Hardening..." "$CYAN"
    echo
    log "тЪая╕П р╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Щр╕╡р╣Йр╕Ир╕░р╕Ыр╕┤р╕Ф Password Authentication р╣Бр╕ер╕░р╣Ар╕Ыр╕┤р╕Фр╣Ар╕Йр╕Юр╕▓р╕░ Key Authentication" "$YELLOW"
    echo
    read -p "ЁЯУЛ р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Хр╣Ир╕н? (yes/no): " confirm
    
    if [[ "$confirm" != "yes" ]]; then
        log "тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г" "$YELLOW"
        return 0
    fi

    local sshd_config="/etc/ssh/sshd_config"
    
    # р╕кр╕│р╕гр╕нр╕Зр╣Др╕Яр╕ер╣Мр╕Бр╣Ир╕нр╕Щр╣Бр╕Бр╣Йр╣Др╕В
    backup_file "$sshd_config"
    
    log "ЁЯФз р╕Бр╕│р╕ер╕▒р╕Зр╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Яр╕ер╣М /etc/ssh/sshd_config ..." "$BLUE"

    # р╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щр╕Бр╕▒р╕Ъ pam.example.sh choice 16 р╕Юр╕гр╣Йр╕нр╕бр╣Ар╕Юр╕┤р╣Ир╕б error handling
    sudo sed -i.bak -E \
        -e 's/^#?PermitRootLogin.*/PermitRootLogin no/' \
        -e 's/^#?PasswordAuthentication.*/PasswordAuthentication no/' \
        -e 's/^#?PermitEmptyPasswords.*/PermitEmptyPasswords no/' \
        -e 's/^#?X11Forwarding.*/X11Forwarding no/' \
        -e 's/^#?UseDNS.*/UseDNS no/' \
        -e 's/^#?UsePAM.*/UsePAM yes/' \
        /etc/ssh/sshd_config || {
        warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Яр╕ер╣М sshd_config р╣Др╕Фр╣Й"
        return 1
    }

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕Вр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Бр╣Ир╕нр╕Щр╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч
    log "ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH..." "$BLUE"
    if ! sudo sshd -t; then
        warning_log "р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З р╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Др╕Яр╕ер╣Мр╣Ар╕Фр╕┤р╕б"
        sudo cp "${sshd_config}.bak" "$sshd_config" 2>/dev/null || true
        return 1
    fi

    # Ensure SSH privilege separation directory exists - р╣Бр╕Бр╣Йр╕Ыр╕▒р╕Нр╕лр╕▓р╕Чр╕╡р╣Ир╣Ар╕Бр╕┤р╕Фр╕Вр╕╢р╣Йр╕Щ
    sudo mkdir -p /run/sshd || {
        warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З SSH privilege separation directory р╣Др╕Фр╣Й"
    }

    log "ЁЯФД р╕Бр╕│р╕ер╕▒р╕З restart sshd ..." "$BLUE"
    if sudo systemctl restart sshd; then
        log "тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ ssh р╣Бр╕ер╕░ restart sshd р╕кр╕│р╣Ар╕гр╣Зр╕И" "$GREEN"
        
        # р╣Бр╕кр╕Фр╕Зр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
        log "ЁЯУЛ р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╕Чр╕╡р╣Ир╕бр╕╡р╕Ьр╕е:" "$BLUE"
        sudo grep -E "^(PermitRootLogin|PasswordAuthentication|PubkeyAuthentication|UsePAM|X11Forwarding)" /etc/ssh/sshd_config
        
        log "тЪая╕П р╕кр╕│р╕Др╕▒р╕Н: Password Authentication р╕Цр╕╣р╕Бр╕Ыр╕┤р╕Фр╣Бр╕ер╣Йр╕з! р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Гр╕лр╣Йр╣Бр╕Щр╣Ир╣Гр╕Ир╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕бр╕╡ SSH key р╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З" "$YELLOW"
    else
        warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч SSH service р╣Др╕Фр╣Й"
        return 1
    fi
}

# р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕▓р╕Щр╕░ PAM
show_pam_status() {
    log "ЁЯУК р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ PAM р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ" "$CYAN"
    echo

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ group wheel
    log "ЁЯФз Group Wheel:" "$BLUE"
    if getent group wheel >/dev/null 2>&1; then
        local wheel_members
        wheel_members=$(getent group wheel | cut -d: -f4)
        if [[ -n "$wheel_members" ]]; then
            log "  тЬЕ р╕бр╕╡р╕нр╕вр╕╣р╣И - р╕кр╕бр╕▓р╕Кр╕┤р╕Б: $wheel_members" "$GREEN"
        else
            log "  тЬЕ р╕бр╕╡р╕нр╕вр╕╣р╣И - р╣Др╕бр╣Ир╕бр╕╡р╕кр╕бр╕▓р╕Кр╕┤р╕Б" "$YELLOW"
        fi
    else
        log "  тЭМ р╣Др╕бр╣Ир╕бр╕╡ group wheel" "$RED"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ sudo permissions
    log "ЁЯФС Sudo Permissions:" "$BLUE"
    if sudo grep -q "^%wheel\s\+ALL=(ALL)\s\+ALL" /etc/sudoers; then
        log "  тЬЕ group wheel р╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo" "$GREEN"
    else
        log "  тЭМ group wheel р╣Др╕бр╣Ир╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo" "$RED"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ password policy
    log "ЁЯФТ Password Policy:" "$BLUE"
    if [[ -f "/etc/security/pwquality.conf" ]]; then
        if grep -q "^minlen" /etc/security/pwquality.conf; then
            log "  тЬЕ р╕бр╕╡р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ password policy" "$GREEN"
            local minlen=$(grep "^minlen" /etc/security/pwquality.conf | cut -d= -f2 | tr -d ' ')
            log "    - р╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╕▒р╣Йр╕Щр╕Хр╣Ир╕│: $minlen р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г" "$BLUE"
        else
            log "  тЪая╕П р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ password policy" "$YELLOW"
        fi
    else
        log "  тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М pwquality.conf" "$RED"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕бр╕╡ IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ (JSON-based)
    if [[ -n "$CURRENT_IP" ]]; then
        log "ЁЯСе р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ъ IP $CURRENT_IP:" "$BLUE"
        local user_count=0

        # р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ъ IP р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕Ир╕▓р╕Б JSON (array structure)
        local usernames
        usernames=($(jq -r --arg ip "$CURRENT_IP" '.ip_mappings[$ip][]?' "$USER_CREDS_JSON" 2>/dev/null))

        for username in "${usernames[@]}"; do
            if id "$username" &>/dev/null; then
                # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ SSH key
                local home_dir
                home_dir=$(eval echo "~$username")
                local ssh_status="тЭМ"

                if [[ -f "$home_dir/.ssh/authorized_keys" ]]; then
                    ssh_status="тЬЕ"
                fi

                # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
                local passwd_status
                passwd_status=$(sudo chage -l "$username" | grep "Password expires" | cut -d: -f2 | tr -d ' ')

                log "  тЬЕ $username (SSH: $ssh_status, Password expires: $passwd_status)" "$GREEN"
            else
                log "  тЭМ $username (р╣Др╕бр╣Ир╕бр╕╡р╣Гр╕Щр╕гр╕░р╕Ър╕Ъ)" "$RED"
            fi
            ((user_count++))
        done

        log "ЁЯУК р╕гр╕зр╕б: $user_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й" "$BLUE"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ SSH configuration
    log "ЁЯФР SSH Configuration:" "$BLUE"
    if [[ -f "/etc/ssh/sshd_config" ]]; then
        local root_login
        root_login=$(grep "^PermitRootLogin" /etc/ssh/sshd_config | awk '{print $2}' || echo "not set")
        log "  - PermitRootLogin: $root_login" "$BLUE"

        local password_auth
        password_auth=$(grep "^PasswordAuthentication" /etc/ssh/sshd_config | awk '{print $2}' || echo "not set")
        log "  - PasswordAuthentication: $password_auth" "$BLUE"

        local pubkey_auth
        pubkey_auth=$(grep "^PubkeyAuthentication" /etc/ssh/sshd_config | awk '{print $2}' || echo "not set")
        log "  - PubkeyAuthentication: $pubkey_auth" "$BLUE"
    fi

    echo
}

# р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ъ
cleanup_system() {
    log "ЁЯз╣ р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ъ..." "$CYAN"

    echo
    read -p "тЪая╕П р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕кр╕│р╕лр╕гр╕▒р╕Ъ IP $CURRENT_IP? (yes/no): " confirm

    if [[ "$confirm" != "yes" ]]; then
        log "тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф" "$YELLOW"
        return
    fi

    local cleanup_count=0

    # р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ъ IP р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ (JSON-based array structure)
    local usernames
    usernames=($(jq -r --arg ip "$CURRENT_IP" '.ip_mappings[$ip][]?' "$USER_CREDS_JSON" 2>/dev/null))

    for username in "${usernames[@]}"; do
        if id "$username" &>/dev/null; then
            sudo userdel -r "$username" 2>/dev/null || true
            log "тЬЕ р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: $username" "$GREEN"
            ((cleanup_count++))
        fi
    done

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕вр╕▒р╕Зр╕бр╕╡р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щ group wheel р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
    local wheel_members
    wheel_members=$(getent group wheel | cut -d: -f4)

    if [[ -z "$wheel_members" ]]; then
        read -p "ЁЯдФ р╣Др╕бр╣Ир╕бр╕╡р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕Щ group wheel р╣Бр╕ер╣Йр╕з р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ъ group wheel р╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/n): " remove_wheel
        if [[ "$remove_wheel" =~ ^[Yy] ]]; then
            sudo groupdel wheel 2>/dev/null || true
            log "тЬЕ р╕ер╕Ъ group wheel" "$GREEN"

            # р╕ер╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo
            if sudo grep -q "^%wheel\s\+ALL=(ALL)\s\+ALL" /etc/sudoers; then
                sudo sed -i.bak '/^%wheel\s\+ALL=(ALL)\s\+ALL/d' /etc/sudoers
                log "тЬЕ р╕ер╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo р╕кр╕│р╕лр╕гр╕▒р╕Ъ group wheel" "$GREEN"
            fi
        fi
    fi

    # р╕ер╕Ър╣Др╕Яр╕ер╣М CSV р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
    if [[ -f "$USER_LIST_FILE" ]]; then
        rm -f "$USER_LIST_FILE"
        log "тЬЕ р╕ер╕Ър╣Др╕Яр╕ер╣М: $USER_LIST_FILE" "$GREEN"
    fi

    if [[ -f "$SSH_KEY_LIST_FILE" ]]; then
        rm -f "$SSH_KEY_LIST_FILE"
        log "тЬЕ р╕ер╕Ър╣Др╕Яр╕ер╣М: $SSH_KEY_LIST_FILE" "$GREEN"
    fi

    log "ЁЯУК р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: р╕ер╕Ъ $cleanup_count р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й" "$BLUE"
}

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕гр╕▒р╕Щ pam.example.sh р╕Ир╕▓р╕Б GitLab - Phase 3 Feature
run_pam_example_script() {
    log "ЁЯФз р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕▒р╕Щ PAM Advanced Options (P'Aomsin Script) р╕Ир╕▓р╕Б GitLab..." "$CYAN"

    echo
    log "ЁЯУЛ PAM Advanced Options (P'Aomsin Script) Features:" "$BLUE"
    echo "  1) Setup group wheel р╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo"
    echo "  2) р╕ер╕Ъ group wheel р╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo"
    echo "  3) р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф group wheel"
    echo "  4) р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З libpwquality1"
    echo "  5) р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ"
    echo "  6) р╕Ыр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ"
    echo "  7) р╕кр╕гр╣Йр╕▓р╕З user р╣Бр╕ер╕░р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Вр╣Йр╕▓ group wheel"
    echo "  8) р╕ер╕Ъ user р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г р╣Бр╕ер╕░р╕нр╕нр╕Бр╕Ир╕▓р╕Б group wheel"
    echo "  9) р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ user"
    echo "  10) р╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ 90 р╕зр╕▒р╕Щ р╣Гр╕лр╣Й User"
    echo "  11) р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ 90 р╕зр╕▒р╕Щ р╣Гр╕лр╣Й User"
    echo "  12) р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ 90 р╕зр╕▒р╕Щ р╣Гр╕лр╣Й User"
    echo "  13) р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М .ssh р╣Бр╕ер╕░р╣Ар╕Юр╕┤р╣Ир╕б public key р╣Гр╕лр╣Й user"
    echo "  14) р╕ер╕Ър╣Др╕Яр╕ер╣М authorized_keys р╕Вр╕нр╕З user"
    echo "  15) р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣М authorized_keys р╕Вр╕нр╕З user"
    echo "  16) р╣Бр╕Бр╣Йр╣Др╕В sshd_config р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в"
    echo "  17) р╕гр╕╡р╣Ар╕Лр╣Зр╕Х /etc/ssh/sshd_config"
    echo "  18) р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╣Ир╕▓ sshd_config р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ"
    echo

    read -p "ЁЯдФ р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М PAM Example р╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/n): " confirm_run
    if [[ ! "$confirm_run" =~ ^[Yy] ]]; then
        log "тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М" "$YELLOW"
        return
    fi

    log "ЁЯУж р╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Ир╕▓р╕Б GitLab..." "$CYAN"

    # р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Ир╕▓р╕Б GitLab
    bash <(curl -kfsSL https://gitlab.com/aomsin3310/script/-/raw/main/pam.sh | tr -d '\r') || {
        warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М PAM Example р╣Др╕Фр╣Й"
        log "ЁЯФз р╕кр╕▓р╣Ар╕лр╕Хр╕╕р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╣Др╕Ыр╣Др╕Фр╣Й:" "$YELLOW"
        echo "  - р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕нр╕┤р╕Щр╣Ар╕Чр╕нр╕гр╣Мр╣Ар╕Щр╣Зр╕Х"
        echo "  - GitLab repository р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й"
        echo "  - р╕Ыр╕▒р╕Нр╕лр╕▓р╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕Нр╕▓р╕Х (permissions)"
        return 1
    }

    log "тЬЕ р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М PAM Example р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ" "$GREEN"
}

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╣Бр╕Ър╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З - Phase 3 Feature
advanced_cleanup() {
    log "ЁЯз╣ р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З..." "$CYAN"

    echo
    log "ЁЯУЛ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕▓р╕гр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф:" "$BLUE"
    echo "  1) р╕ер╕Ър╣Др╕Яр╕ер╣М backup р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"
    echo "  2) р╕ер╕Ър╣Др╕Яр╕ер╣М CSV р╣Бр╕ер╕░ JSON р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ"
    echo "  3) р╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq (р╕Цр╣Йр╕▓р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Вр╕Фр╕вр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М)"
    echo "  4) р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (1+2+3)"
    echo "  5) р╕вр╕Бр╣Ар╕ер╕┤р╕Б"
    echo

    read -p "ЁЯОп р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕лр╕бр╕▓р╕вр╣Ар╕ер╕В (1-5): " cleanup_choice

    case $cleanup_choice in
    1)
        cleanup_backup_files
        ;;
    2)
        cleanup_generated_files
        ;;
    3)
        cleanup_dependencies
        ;;
    4)
        cleanup_backup_files
        cleanup_generated_files
        cleanup_dependencies
        ;;
    5)
        log "тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф" "$YELLOW"
        return
        ;;
    *)
        log "тЭМ р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕лр╕бр╕▓р╕вр╣Ар╕ер╕В 1-5" "$RED"
        return
        ;;
    esac

    log "тЬЕ р╕Бр╕▓р╕гр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕Зр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ" "$GREEN"
}

# р╕ер╕Ър╣Др╕Яр╕ер╣М backup
cleanup_backup_files() {
    log "ЁЯЧВя╕П р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ър╣Др╕Яр╕ер╣М backup..." "$CYAN"

    local backup_count=0

    # р╕ер╕Ър╣Др╕Яр╕ер╣М backup р╕Чр╕╡р╣Ир╕бр╕╡ pattern .backup_TIMESTAMP
    for backup_file in *.backup_* /etc/ssh/sshd_config.backup_* /etc/sudoers.backup_* /etc/security/pwquality.conf.backup_*; do
        if [[ -f "$backup_file" ]]; then
            sudo rm -f "$backup_file" || {
                warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╣Др╕Яр╕ер╣М backup: $backup_file"
                continue
            }
            log "тЬЕ р╕ер╕Ър╣Др╕Яр╕ер╣М backup: $backup_file" "$GREEN"
            ((backup_count++))
        fi
    done

    # р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup
    if [[ -n "$BACKUP_DIR" && -d "$BACKUP_DIR" ]]; then
        rm -rf "$BACKUP_DIR" || {
            warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup: $BACKUP_DIR"
        }
        log "тЬЕ р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup: $BACKUP_DIR" "$GREEN"
        ((backup_count++))
    fi

    # р╕лр╕▓р╣Бр╕ер╕░р╕ер╕Ър╣Др╕Яр╕ер╣М backup р╕нр╕╖р╣Ир╕Щр╣Ж
    find . -maxdepth 1 -name "backup_*" -type d 2>/dev/null | while read -r dir; do
        rm -rf "$dir" || warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М: $dir"
        log "тЬЕ р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup: $dir" "$GREEN"
        ((backup_count++))
    done

    log "ЁЯУК р╕ер╕Ър╣Др╕Яр╕ер╣М backup р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: $backup_count р╕гр╕▓р╕вр╕Бр╕▓р╕г" "$BLUE"
}

# р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
cleanup_generated_files() {
    log "ЁЯУЭ р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ..." "$CYAN"

    local file_count=0

    # р╕ер╕Ър╣Др╕Яр╕ер╣М CSV р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
    for file in "$USER_LIST_FILE" "$SSH_KEY_LIST_FILE"; do
        if [[ -f "$file" ]]; then
            rm -f "$file" || {
                warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╣Др╕Яр╕ер╣М: $file"
                continue
            }
            log "тЬЕ р╕ер╕Ър╣Др╕Яр╕ер╣М: $file" "$GREEN"
            ((file_count++))
        fi
    done

    # р╕ер╕Ър╣Др╕Яр╕ер╣М temporary р╕нр╕╖р╣Ир╕Щр╣Ж
    for temp_file in /tmp/sshd_config_new /tmp/pam_agent_*; do
        if [[ -f "$temp_file" ]]; then
            sudo rm -f "$temp_file" || warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ър╣Др╕Яр╕ер╣М temporary: $temp_file"
            log "тЬЕ р╕ер╕Ър╣Др╕Яр╕ер╣М temporary: $temp_file" "$GREEN"
            ((file_count++))
        fi
    done

    log "ЁЯУК р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: $file_count р╕гр╕▓р╕вр╕Бр╕▓р╕г" "$BLUE"
}

# р╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З dependencies
cleanup_dependencies() {
    log "ЁЯУж р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ dependencies..." "$CYAN"

    echo
    read -p "тЪая╕П р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq р╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/n): " remove_jq

    if [[ "$remove_jq" =~ ^[Yy] ]]; then
        if command -v jq &>/dev/null; then
            sudo apt-get remove -y jq || {
                warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq р╣Др╕Фр╣Й"
                return 1
            }
            log "тЬЕ р╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в" "$GREEN"
        else
            log "тД╣я╕П jq р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Гр╕Щр╕гр╕░р╕Ър╕Ъ" "$YELLOW"
        fi
    else
        log "тПня╕П р╕Вр╣Йр╕▓р╕бр╕Бр╕▓р╕гр╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З jq" "$YELLOW"
    fi

    # р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф apt cache
    read -p "ЁЯз╣ р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф apt cache р╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/n): " clean_apt
    if [[ "$clean_apt" =~ ^[Yy] ]]; then
        sudo apt-get autoremove -y || warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕▒р╕Щ autoremove р╣Др╕Фр╣Й"
        sudo apt-get autoclean || warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕▒р╕Щ autoclean р╣Др╕Фр╣Й"
        log "тЬЕ р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф apt cache р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в" "$GREEN"
    fi
}

# р╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕г PAM Creation р╕лр╕ер╕▒р╕Б
pam_creation_workflow() {
    log "ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З PAM..." "$CYAN"

    # р╣Ар╕ер╕╖р╕нр╕Б IP
    select_ip

    # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М CSV
    generate_csv_files

    # р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М backup
    create_backup_dir

    # р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ group wheel
    setup_wheel_group

    # р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З password policy (optional)
    setup_password_policy

    # р╕гр╕▒р╕Ър╕Др╣Ир╕▓р╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
    get_password_expiry_days

    # р╕кр╕гр╣Йр╕▓р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    create_users

    # р╕Хр╕▒р╣Йр╕Зр╕нр╕▓р╕вр╕╕р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
    set_password_expiry

    # р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH keys
    setup_ssh_keys

    log "ЁЯОЙ р╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З PAM р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!" "$GREEN"
    echo
    show_pam_status
}

# р╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б - Phase 3 Enhanced
show_main_menu() {
    echo
    log "=======================================" "$CYAN"
    log "      PAM Automation Agent V4" "$CYAN"
    log "   (JSON-based Smart IP Detection)" "$CYAN"
    log "    Phase 3 - Enhanced Features" "$CYAN"
    log "=======================================" "$CYAN"
    log "1) ЁЯФз PAM Creation (р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕░р╕Ър╕Ъ PAM)" "$BLUE"
    log "2) ЁЯФТ SSH Security Hardening (р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в SSH)" "$BLUE"
    log "3) ЁЯУК Show PAM Status (р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕▓р╕Щр╕░ PAM)" "$BLUE"
    log "4) ЁЯз╣ Clean-up (р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ъ)" "$BLUE"
    log "5) ЁЯУЭ CSV Generation (р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М CSV)" "$BLUE"
    log "6) ЁЯЫая╕П PAM Advanced Options (P'Aomsin Script)" "$BLUE"
    log "7) ЁЯЧВя╕П Advanced Cleanup (р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З)" "$BLUE"
    log "8) ЁЯЪк Exit (р╕нр╕нр╕Б)" "$BLUE"
    echo
    log "ЁЯЖШ Emergency Options:" "$RED"
    log "99) ЁЯЪи Emergency SSH System Fix (р╣Бр╕Бр╣Йр╣Др╕Вр╕гр╕░р╕Ър╕Ъ SSH р╕Йр╕╕р╕Бр╣Ар╕Йр╕┤р╕Щ)" "$RED"
    log "=======================================" "$CYAN"
}

# Emergency SSH System Fix - р╣Гр╕Кр╣Йр╣Гр╕Щр╕Бр╕гр╕Ур╕╡р╕Йр╕╕р╕Бр╣Ар╕Йр╕┤р╕Щр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ
emergency_ssh_system_fix() {
    log "ЁЯЪи Emergency SSH System Fix - р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ..." "$RED"
    echo
    log "тЪая╕П р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Йр╕╕р╕Бр╣Ар╕Йр╕┤р╕Щ! р╣Гр╕Кр╣Йр╣Ар╕бр╕╖р╣Ир╕н SSH service р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕┤р╣Ир╕бр╣Др╕Фр╣Й" "$YELLOW"
    echo
    read -p "ЁЯУЛ р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕гр╕▒р╕Щ Emergency SSH Fix? (yes/no): " confirm
    
    if [[ "$confirm" != "yes" ]]; then
        log "тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г" "$YELLOW"
        return 0
    fi

    log "ЁЯФз Step 1: р╕кр╕гр╣Йр╕▓р╕З SSH privilege separation directory..." "$CYAN"
    sudo mkdir -p /run/sshd || {
        error_exit "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З /run/sshd р╣Др╕Фр╣Й"
    }
    sudo chown root:root /run/sshd
    sudo chmod 755 /run/sshd
    sudo chmod 755 /run 2>/dev/null || true
    log "тЬЕ р╕кр╕гр╣Йр╕▓р╕З /run/sshd directory р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в" "$GREEN"

    log "ЁЯФз Step 2: р╕кр╕│р╕гр╕нр╕Зр╣Бр╕ер╕░р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╣Гр╕лр╕бр╣И..." "$CYAN"
    sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.emergency_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true

    sudo tee /etc/ssh/sshd_config > /dev/null << 'EOF'
# Emergency SSH Configuration - System Recovery
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::

# Host keys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Privilege separation
UsePrivilegeSeparation yes

# Authentication
PermitRootLogin yes
PasswordAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# PAM and other settings
UsePAM yes
X11Forwarding yes
PrintMotd no
AcceptEnv LANG LC_*

# Security settings
ClientAliveInterval 300
ClientAliveCountMax 2
MaxAuthTries 3
MaxSessions 3
LoginGraceTime 60
UseDNS yes

# Subsystem
Subsystem sftp /usr/lib/openssh/sftp-server
EOF

    log "ЁЯФз Step 3: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕кр╕гр╣Йр╕▓р╕З SSH host keys..." "$CYAN"
    sudo mkdir -p /etc/ssh 2>/dev/null || true
    
    if [[ ! -f /etc/ssh/ssh_host_rsa_key ]] || [[ ! -f /etc/ssh/ssh_host_ecdsa_key ]] || [[ ! -f /etc/ssh/ssh_host_ed25519_key ]]; then
        log "ЁЯФС р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕З SSH host keys..." "$BLUE"
        sudo ssh-keygen -A 2>/dev/null || true
        log "тЬЕ SSH host keys р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в" "$GREEN"
    else
        log "тЬЕ SSH host keys р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з" "$GREEN"
    fi

    log "ЁЯФз Step 4: р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Др╕Яр╕ер╣М..." "$CYAN"
    sudo chmod 600 /etc/ssh/ssh_host_*_key 2>/dev/null || true
    sudo chmod 644 /etc/ssh/ssh_host_*_key.pub 2>/dev/null || true
    sudo chmod 644 /etc/ssh/sshd_config
    sudo chown root:root /etc/ssh/sshd_config
    sudo chown root:root /etc/ssh/ssh_host_* 2>/dev/null || true

    log "ЁЯзк Step 5: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH..." "$CYAN"
    if sudo sshd -t; then
        log "тЬЕ р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З" "$GREEN"
    else
        error_exit "р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З"
    fi

    log "ЁЯФД Step 6: р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч SSH service..." "$CYAN"
    local service_restarted=false
    
    if sudo systemctl restart sshd 2>/dev/null; then
        service_name="sshd"
        service_restarted=true
    elif sudo systemctl restart ssh 2>/dev/null; then
        service_name="ssh"
        service_restarted=true
    elif sudo service sshd restart 2>/dev/null; then
        service_name="sshd"
        service_restarted=true
    elif sudo service ssh restart 2>/dev/null; then
        service_name="ssh"
        service_restarted=true
    fi

    if [[ "$service_restarted" == "true" ]]; then
        log "тЬЕ SSH service ($service_name) р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Чр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в" "$GREEN"
    else
        warning_log "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч SSH service р╣Др╕Фр╣Й"
        return 1
    fi

    log "ЁЯФН Step 7: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░ service..." "$CYAN"
    sleep 3
    if systemctl is-active --quiet sshd 2>/dev/null || systemctl is-active --quiet ssh 2>/dev/null || pgrep sshd >/dev/null; then
        log "ЁЯОЙ SSH service р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤!" "$GREEN"
        
        log "ЁЯУЛ р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ:" "$BLUE"
        echo "----------------------------------------"
        sudo grep -E "^(PermitRootLogin|PasswordAuthentication|PubkeyAuthentication|UsePAM|X11Forwarding)" /etc/ssh/sshd_config 2>/dev/null || echo "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕нр╣Ир╕▓р╕Щр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SSH р╣Др╕Фр╣Й"
        echo "----------------------------------------"
        
        log "тЬЕ Emergency SSH Recovery р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!" "$GREEN"
        log "ЁЯФТ Root login р╕Цр╕╣р╕Бр╣Ар╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ" "$BLUE"
        log "ЁЯФС Password р╣Бр╕ер╕░ key authentication р╣Ар╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ" "$BLUE"
        log "тЪая╕П р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Гр╕лр╣Йр╣Бр╕Щр╣Ир╣Гр╕Ир╕зр╣Ир╕▓р╕кр╕▓р╕бр╕▓р╕гр╕Ц login р╕Фр╣Йр╕зр╕в root user р╣Бр╕ер╕░ non-root user р╣Др╕Фр╣Й!" "$YELLOW"
    else
        error_exit "SSH service р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Чр╕│р╕Зр╕▓р╕Щ"
    fi
}

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б
main() {
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Ар╕Ыр╣Зр╕Щ root р╕лр╕гр╕╖р╕нр╕бр╕╡ sudo
    if [[ $EUID -eq 0 ]]; then
        warning_log "р╕Бр╕│р╕ер╕▒р╕Зр╕гр╕▒р╕Щр╕Фр╣Йр╕зр╕вр╕кр╕┤р╕Чр╕Шр╕┤р╣М root р╕Лр╕╢р╣Ир╕Зр╕нр╕▓р╕Ир╣Ар╕Ыр╣Зр╕Щр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ sudo
    if ! sudo -v 2>/dev/null; then
        error_exit "р╕Хр╣Йр╕нр╕Зр╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣М sudo р╣Гр╕Щр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
    fi

    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
    if ! check_required_files; then
        error_exit "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╣Др╕Фр╣Й"
    fi

    while true; do
        show_main_menu
        echo
        read -p "ЁЯОп р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕лр╕бр╕▓р╕вр╣Ар╕ер╕В (1-8, 99=р╕Йр╕╕р╕Бр╣Ар╕Йр╕┤р╕Щ): " choice

        case $choice in
        1)
            echo
            log "ЁЯФз р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ PAM Creation..." "$GREEN"
            pam_creation_workflow
            ;;
        2)
            echo
            log "ЁЯФТ р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ SSH Security Hardening..." "$GREEN"
            ssh_security_hardening
            ;;
        3)
            echo
            if [[ -z "$CURRENT_IP" ]]; then
                log "тЪая╕П р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕╖р╕нр╕Б IP р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Б IP р╕Бр╣Ир╕нр╕Щ" "$YELLOW"
                select_ip
            fi
            show_pam_status
            ;;
        4)
            echo
            if [[ -z "$CURRENT_IP" ]]; then
                log "тЪая╕П р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕╖р╕нр╕Б IP р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Б IP р╕Бр╣Ир╕нр╕Щ" "$YELLOW"
                select_ip
            fi
            cleanup_system
            ;;
        5)
            echo
            log "ЁЯУЭ р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ CSV Generation..." "$GREEN"
            select_ip
            generate_csv_files
            ;;
        6)
            echo
            log "ЁЯЫая╕П р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ PAM Advanced Options (P'Aomsin Script)..." "$GREEN"
            run_pam_example_script
            ;;
        7)
            echo
            log "ЁЯЧВя╕П р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Advanced Cleanup..." "$GREEN"
            advanced_cleanup
            ;;
        8)
            echo
            log "ЁЯСЛ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ PAM Automation Agent V4 - Phase 3" "$GREEN"
            exit 0
            ;;
        99)
            echo
            log "ЁЯЪи р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Emergency SSH System Fix..." "$RED"
            emergency_ssh_system_fix
            ;;
        *)
            log "тЭМ р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕лр╕бр╕▓р╕вр╣Ар╕ер╕В 1-8 р╕лр╕гр╕╖р╕н 99 р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Йр╕╕р╕Бр╣Ар╕Йр╕┤р╕Щ" "$RED"
            ;;
        esac

        echo
        read -p "ЁЯУД р╕Бр╕Ф Enter р╣Ар╕Юр╕╖р╣Ир╕нр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕вр╕▒р╕Зр╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б..."
    done
}

# р╕Фр╕▒р╕Бр╕Ир╕▒р╕Ъ signals р╕кр╕│р╕лр╕гр╕▒р╕Ъ cleanup
trap 'error_exit "р╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Цр╕╣р╕Бр╕лр╕вр╕╕р╕Фр╣Вр╕Фр╕вр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й"' INT TERM

# р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б
main "$@"
